import telebot
import logging
import os
import json
import time
import requests
import socket
from datetime import datetime, timedelta
from telebot import types
from requests.exceptions import ConnectionError, Timeout, RequestException
from urllib3.exceptions import NewConnectionError, MaxRetryError
from supabase import create_client, Client
import re
from bs4 import BeautifulSoup

# Configuraci√≥n del bot
BOT_TOKEN = os.getenv('BOT_TOKEN')
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')

if not BOT_TOKEN:
    print("‚ùå ERROR: BOT_TOKEN no est√° configurado")
    exit(1)

if not SUPABASE_URL or not SUPABASE_KEY:
    print("‚ùå ERROR: SUPABASE_URL y SUPABASE_KEY no est√°n configurados")
    print("üí° Configura estas variables de entorno en Render:")
    print("   SUPABASE_URL=https://tu-proyecto.supabase.co")
    print("   SUPABASE_KEY=tu-clave-supabase")
    exit(1)

# Crear instancia del bot
bot = telebot.TeleBot(BOT_TOKEN)

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)

# Configuraci√≥n de Supabase (Base de datos en la nube)
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

def init_database():
    """Inicializa la base de datos en Supabase (PostgreSQL en la nube)"""
    try:
        # Verificar conexi√≥n probando las tablas
        supabase.table('registered_users').select('user_id').limit(1).execute()
        logging.info("‚úÖ Tabla registered_users verificada")
        
        supabase.table('user_registration_log').select('id').limit(1).execute()
        logging.info("‚úÖ Tabla user_registration_log verificada")
        
        logging.info("‚úÖ Base de datos Supabase inicializada correctamente")
        return True
    except Exception as e:
        logging.error(f"‚ùå Error al inicializar base de datos Supabase: {e}")
        logging.error("üí° Aseg√∫rate de que las tablas est√©n creadas en Supabase")
        return False

def backup_database():
    """Crea un respaldo de la base de datos (Supabase ya tiene respaldo autom√°tico)"""
    try:
        # Supabase tiene respaldo autom√°tico, solo confirmamos
        logging.info("‚úÖ Supabase tiene respaldo autom√°tico habilitado")
        return True
    except Exception as e:
        logging.error(f"‚ùå Error al verificar respaldo: {e}")
        return False

def log_user_action(user_id, action, details=""):
    """Registra una acci√≥n del usuario en el log usando Supabase"""
    try:
        result = supabase.table('user_registration_log').insert({
            'user_id': user_id,
            'action': action,
            'details': details
        }).execute()
        
        logging.info(f"üìù Log registrado: Usuario {user_id} - {action}")
        
    except Exception as e:
        logging.error(f"‚ùå Error al registrar log: {e}")

def load_registered_users():
    """Carga los usuarios registrados desde Supabase"""
    try:
        result = supabase.table('registered_users').select('user_id').execute()
        user_ids = [row['user_id'] for row in result.data]
        return set(user_ids)
    except Exception as e:
        logging.error(f"‚ùå Error al cargar usuarios registrados: {e}")
        return set()

def add_registered_user(user_id, username=None, first_name=None, last_name=None):
    """Agrega un usuario a la base de datos usando Supabase"""
    try:
        # Verificar si el usuario ya existe
        existing = supabase.table('registered_users').select('user_id').eq('user_id', user_id).execute()
        is_new_user = len(existing.data) == 0
        
        # Insertar o actualizar usuario
        user_data = {
            'user_id': user_id,
            'username': username,
            'first_name': first_name,
            'last_name': last_name
        }
        
        if is_new_user:
            result = supabase.table('registered_users').insert(user_data).execute()
        else:
            result = supabase.table('registered_users').update(user_data).eq('user_id', user_id).execute()
        
        action = "REGISTRO" if is_new_user else "ACTUALIZACION"
        details = f"Username: {username}, Nombre: {first_name} {last_name}"
        log_user_action(user_id, action, details)
        
        logging.info(f"‚úÖ Usuario {user_id} {'registrado' if is_new_user else 'actualizado'} en Supabase")
        return True
    except Exception as e:
        logging.error(f"‚ùå Error al agregar usuario {user_id}: {e}")
        return False

def remove_registered_user(user_id):
    """Remueve un usuario de la base de datos usando Supabase"""
    try:
        # Obtener informaci√≥n del usuario antes de eliminarlo
        user_info = supabase.table('registered_users').select('username, first_name, last_name').eq('user_id', user_id).execute()
        
        # Eliminar usuario
        result = supabase.table('registered_users').delete().eq('user_id', user_id).execute()
        
        # Registrar la acci√≥n en el log
        if user_info.data:
            user_data = user_info.data[0]
            details = f"Username: {user_data.get('username')}, Nombre: {user_data.get('first_name')} {user_data.get('last_name')}"
            log_user_action(user_id, "ELIMINACION", details)
        
        logging.info(f"‚úÖ Usuario {user_id} removido de Supabase")
        return True
    except Exception as e:
        logging.error(f"‚ùå Error al remover usuario {user_id}: {e}")
        return False

def get_user_info(user_id):
    """Obtiene informaci√≥n de un usuario registrado desde Supabase"""
    try:
        result = supabase.table('registered_users').select('username, first_name, last_name, registered_at').eq('user_id', user_id).execute()
        
        if result.data:
            user_data = result.data[0]
            return {
                'username': user_data.get('username'),
                'first_name': user_data.get('first_name'),
                'last_name': user_data.get('last_name'),
                'registered_at': user_data.get('registered_at')
            }
        return None
    except Exception as e:
        logging.error(f"‚ùå Error al obtener informaci√≥n del usuario {user_id}: {e}")
        return None

def load_direct_message_users():
    """Carga los usuarios registrados para mensajes directos desde Supabase"""
    try:
        result = supabase.table('direct_message_users').select('user_id').execute()
        user_ids = [row['user_id'] for row in result.data]
        return set(user_ids)
    except Exception as e:
        logging.error(f"‚ùå Error al cargar usuarios de mensajes directos: {e}")
        return set()

def add_direct_message_user(user_id, username=None, first_name=None, last_name=None):
    """Agrega un usuario para recibir mensajes directos usando Supabase"""
    try:
        # Verificar si el usuario ya existe
        existing = supabase.table('direct_message_users').select('user_id').eq('user_id', user_id).execute()
        is_new_user = len(existing.data) == 0
        
        if is_new_user:
            # Insertar usuario
            user_data = {
                'user_id': user_id,
                'username': username,
                'first_name': first_name,
                'last_name': last_name
            }
            
            result = supabase.table('direct_message_users').insert(user_data).execute()
            
            action = "REGISTRO_DIRECT_MESSAGE"
            details = f"Username: {username}, Nombre: {first_name} {last_name}"
            log_user_action(user_id, action, details)
            
            logging.info(f"‚úÖ Usuario {user_id} registrado para mensajes directos")
            return True
        else:
            logging.info(f"‚ÑπÔ∏è Usuario {user_id} ya est√° registrado para mensajes directos")
            return True  # Ya est√° registrado, consideramos √©xito
    except Exception as e:
        logging.error(f"‚ùå Error al agregar usuario de mensajes directos {user_id}: {e}")
        return False

def remove_direct_message_user(user_id):
    """Remueve un usuario de los mensajes directos usando Supabase"""
    try:
        # Obtener informaci√≥n del usuario antes de eliminarlo
        user_info = supabase.table('direct_message_users').select('username, first_name, last_name').eq('user_id', user_id).execute()
        
        # Eliminar usuario
        result = supabase.table('direct_message_users').delete().eq('user_id', user_id).execute()
        
        # Registrar la acci√≥n en el log
        if user_info.data:
            user_data = user_info.data[0]
            details = f"Username: {user_data.get('username')}, Nombre: {user_data.get('first_name')} {user_data.get('last_name')}"
            log_user_action(user_id, "ELIMINACION_DIRECT_MESSAGE", details)
        
        logging.info(f"‚úÖ Usuario {user_id} removido de mensajes directos")
        return True
    except Exception as e:
        logging.error(f"‚ùå Error al remover usuario de mensajes directos {user_id}: {e}")
        return False

def send_direct_messages_to_users(alert_text, command_name):
    """Env√≠a mensajes directos a todos los usuarios registrados"""
    try:
        if not direct_message_users:
            logging.info("‚ÑπÔ∏è No hay usuarios registrados para mensajes directos")
            return
        
        message_text = f"üîî ALERTA EN EL GRUPO üîî\n\n"
        message_text += f"Comando: {command_name}\n"
        message_text += f"Mensaje: {alert_text}\n\n"
        message_text += "Favor revisar el grupo para m√°s detalles."
        
        sent_count = 0
        for user_id in direct_message_users:
            try:
                bot.send_message(user_id, message_text)
                sent_count += 1
                logging.info(f"‚úÖ Mensaje directo enviado a usuario {user_id}")
            except Exception as e:
                error_str = str(e).lower()
                logging.error(f"‚ùå Error al enviar mensaje directo a usuario {user_id}: {e}")
                
                # Manejar diferentes tipos de errores
                if ("chat not found" in error_str or 
                    "blocked" in error_str or 
                    "user is deactivated" in error_str):
                    # Usuario no contactable, removerlo
                    logging.info(f"üóëÔ∏è Removiendo usuario {user_id} de mensajes directos (no contactable)")
                    remove_direct_message_user(user_id)
                    direct_message_users.discard(user_id)
                elif "bot can't initiate conversation" in error_str:
                    # Usuario no ha iniciado conversaci√≥n con el bot
                    logging.warning(f"‚ö†Ô∏è Usuario {user_id} no ha iniciado conversaci√≥n con el bot")
                    # No removerlo, solo avisar
                else:
                    # Otro tipo de error, no remover
                    logging.warning(f"‚ö†Ô∏è Error desconocido para usuario {user_id}: {e}")
        
        logging.info(f"üì§ Mensajes directos enviados: {sent_count}/{len(direct_message_users)}")
        
    except Exception as e:
        logging.error(f"‚ùå Error al enviar mensajes directos: {e}")

def search_nba_season_start():
    """Busca la fecha de inicio de la temporada NBA 2025-26"""
    try:
        # B√∫squeda en Google para obtener la fecha de inicio
        search_query = "NBA season 2025-26 start date when does it begin"
        search_url = f"https://www.google.com/search?q={search_query}"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        response = requests.get(search_url, headers=headers, timeout=10)
        response.raise_for_status()
        
        # Parsear el HTML
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # Buscar fechas en el contenido
        text_content = soup.get_text().lower()
        
        # Patrones comunes para fechas de NBA
        date_patterns = [
            r'october\s+\d{1,2},?\s+2025',
            r'oct\s+\d{1,2},?\s+2025',
            r'\d{1,2}/\d{1,2}/2025',
            r'\d{1,2}-\d{1,2}-2025',
            r'october\s+\d{1,2}',
            r'oct\s+\d{1,2}'
        ]
        
        found_dates = []
        for pattern in date_patterns:
            matches = re.findall(pattern, text_content)
            found_dates.extend(matches)
        
        # Si no encontramos fechas espec√≠ficas, usar fecha estimada
        if not found_dates:
            # La NBA generalmente comienza a finales de octubre
            return datetime(2025, 10, 22)  # Fecha estimada t√≠pica
        
        # Procesar las fechas encontradas
        for date_str in found_dates:
            try:
                # Intentar parsear diferentes formatos
                if 'october' in date_str or 'oct' in date_str:
                    # Extraer d√≠a
                    day_match = re.search(r'\d{1,2}', date_str)
                    if day_match:
                        day = int(day_match.group())
                        return datetime(2025, 10, day)
                elif '/' in date_str or '-' in date_str:
                    # Formato MM/DD/YYYY o MM-DD-YYYY
                    parts = re.split(r'[/-]', date_str)
                    if len(parts) >= 3:
                        month = int(parts[0])
                        day = int(parts[1])
                        year = int(parts[2])
                        if year == 2025:
                            return datetime(year, month, day)
            except (ValueError, IndexError):
                continue
        
        # Fallback: fecha estimada
        return datetime(2025, 10, 22)
        
    except Exception as e:
        logging.error(f"‚ùå Error al buscar fecha de NBA: {e}")
        # Fallback: fecha estimada t√≠pica
        return datetime(2025, 10, 22)

def calculate_days_until_nba():
    """Calcula los d√≠as restantes hasta el inicio de la temporada NBA 2025-26"""
    try:
        # Obtener fecha de inicio
        season_start = search_nba_season_start()
        
        # Fecha actual
        today = datetime.now()
        
        # Calcular diferencia
        if season_start > today:
            days_left = (season_start - today).days
            return days_left, season_start
        else:
            # Si ya pas√≥ la fecha, buscar la pr√≥xima temporada
            next_season = datetime(2026, 10, 22)  # Estimaci√≥n para 2026-27
            days_left = (next_season - today).days
            return days_left, next_season
            
    except Exception as e:
        logging.error(f"‚ùå Error al calcular d√≠as de NBA: {e}")
        # Fallback
        fallback_date = datetime(2025, 10, 22)
        today = datetime.now()
        days_left = (fallback_date - today).days
        return max(0, days_left), fallback_date

def check_network_connectivity():
    """Verifica la conectividad de red antes de iniciar el bot"""
    try:
        # Verificar conectividad b√°sica
        socket.create_connection(("8.8.8.8", 53), timeout=5)
        logging.info("‚úÖ Conectividad de red b√°sica verificada")
        
        # Verificar conectividad a Telegram API
        response = requests.get("https://api.telegram.org", timeout=10)
        if response.status_code == 200:
            logging.info("‚úÖ Conectividad a Telegram API verificada")
            return True
        else:
            logging.warning(f"‚ö†Ô∏è Telegram API respondi√≥ con c√≥digo: {response.status_code}")
            return False
    except Exception as e:
        logging.error(f"‚ùå Error de conectividad: {e}")
        return False

def clear_webhook():
    """Limpia el webhook para evitar conflictos"""
    max_retries = 5
    for attempt in range(max_retries):
        try:
            # Primero obtener informaci√≥n del webhook
            webhook_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
            webhook_response = requests.get(webhook_url, timeout=10)
            
            if webhook_response.status_code == 200:
                webhook_data = webhook_response.json()
                if webhook_data.get('result', {}).get('url'):
                    logging.info(f"üîç Webhook encontrado: {webhook_data['result']['url']}")
                else:
                    logging.info("‚ÑπÔ∏è No hay webhook configurado")
            
            # Ahora eliminar el webhook
            delete_url = f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook"
            response = requests.get(delete_url, timeout=10)
            
            if response.status_code == 200:
                logging.info("‚úÖ Webhook limpiado correctamente")
                # Esperar un poco para que se propague
                time.sleep(2)
                return True
            else:
                logging.warning(f"‚ö†Ô∏è Error al limpiar webhook: {response.status_code}")
                if response.status_code == 409:
                    logging.warning("‚ö†Ô∏è Conflicto detectado, esperando m√°s tiempo...")
                    time.sleep(5)
                
        except (ConnectionError, Timeout, NewConnectionError, MaxRetryError) as e:
            logging.warning(f"‚ö†Ô∏è Intento {attempt + 1} fallido al limpiar webhook: {e}")
            if attempt < max_retries - 1:
                wait_time = min(2 ** attempt, 10)  # M√°ximo 10 segundos
                time.sleep(wait_time)
        except Exception as e:
            logging.error(f"‚ùå Error inesperado al limpiar webhook: {e}")
            if attempt < max_retries - 1:
                time.sleep(3)
    
    logging.error("‚ùå No se pudo limpiar el webhook despu√©s de todos los intentos")
    return False

def escape_markdown(text):
    """Escapa caracteres especiales de Markdown"""
    if not text:
        return text
    
    # Caracteres especiales que necesitan escape en Markdown
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

def safe_markdown_text(text):
    """Prepara texto para Markdown de forma segura"""
    if not text:
        return "Usuario"
    
    # Limpiar caracteres problem√°ticos
    text = str(text)
    
    # Limpiar caracteres de control y caracteres problem√°ticos
    text = ''.join(char for char in text if ord(char) >= 32 or char in '\n\r\t')
    
    # Escapar caracteres especiales de Markdown
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    
    # Limitar longitud para evitar problemas
    if len(text) > 50:
        text = text[:47] + "..."
    
    return text

def clean_name_for_mention(name):
    """Limpia nombres para menciones de forma segura, preservando s√≠mbolos"""
    if not name:
        return "Usuario"
    
    # Convertir a string
    name = str(name)
    
    # Solo remover caracteres de control problem√°ticos, NO s√≠mbolos
    name = ''.join(char for char in name if ord(char) >= 32 or char in '\n\r\t')
    
    # Remover TODOS los caracteres que pueden causar problemas en enlaces de Markdown
    # Esto incluye caracteres especiales que pueden romper el parseo
    problematic_chars = ['[', ']', '(', ')', '\\', '*', '_', '`', '~', '>', '#', '+', '-', '=', '|', '{', '}', '!']
    for char in problematic_chars:
        name = name.replace(char, '')
    
    # Limpiar espacios extra
    name = ' '.join(name.split())
    
    # Si el nombre queda vac√≠o, usar "Usuario"
    if not name.strip():
        name = "Usuario"
    
    # Limitar longitud
    if len(name) > 20:
        name = name[:17] + "..."
    
    return name

def clean_text_for_telegram(text):
    """Limpia texto para enviar a Telegram sin formato"""
    if not text:
        return ""
    
    # Convertir a string
    text = str(text)
    
    # Remover caracteres de control problem√°ticos
    text = ''.join(char for char in text if ord(char) >= 32 or char in '\n\r\t')
    
    # Remover caracteres especiales de Markdown
    markdown_chars = ['*', '_', '`', '[', ']', '(', ')', '~', '>', '#', '+', '-', '=', '|', '{', '}', '!']
    for char in markdown_chars:
        text = text.replace(char, '')
    
    return text

def create_safe_mention_text(mention_text, mentions):
    """Crea texto de menciones seguro para Markdown"""
    try:
        # Crear el texto base
        result_text = mention_text
        
        # Agregar menciones de forma segura
        if mentions:
            # Dividir menciones en grupos de 5 para evitar l√≠mites
            for i in range(0, len(mentions), 5):
                batch = mentions[i:i+5]
                result_text += " ".join(batch) + "\n"
        
        return result_text
    except Exception as e:
        logging.error(f"Error al crear texto de menciones: {e}")
        # Fallback: enviar sin menciones
        return mention_text + "\n(Error al procesar menciones)"

def validate_markdown_text(text):
    """Valida si un texto es seguro para Markdown"""
    if not text:
        return False
    
    # Verificar patrones problem√°ticos (pero permitir enlaces v√°lidos)
    problematic_patterns = [
        '**', '__', '``', '~~', '>>', '##', '++', '--', '==', '||', '{{', '}}'
    ]
    
    for pattern in problematic_patterns:
        if pattern in text:
            return False
    
    # Verificar caracteres especiales problem√°ticos (pero permitir enlaces)
    # Solo rechazar si hay caracteres especiales que no sean parte de enlaces v√°lidos
    special_chars = ['*', '_', '`', '~', '>', '#', '+', '-', '=', '|', '{', '}', '!']
    for char in special_chars:
        if char in text and f'\\{char}' not in text:
            return False
    
    # Permitir enlaces v√°lidos de Telegram: [texto](tg://user?id=123)
    # No rechazar por tener [ o ] si son parte de un enlace v√°lido
    
    return True


def safe_send_message(chat_id, text, parse_mode='Markdown', max_retries=5):
    """Env√≠a un mensaje con reintentos en caso de error de conexi√≥n"""
    for attempt in range(max_retries):
        try:
            # Si hay error de parseo de Markdown, intentar sin formato
            if parse_mode == 'Markdown':
                try:
                    bot.send_message(chat_id, text, parse_mode=parse_mode)
                    return True
                except Exception as markdown_error:
                    if "can't parse entities" in str(markdown_error) or "Bad Request" in str(markdown_error):
                        logging.warning(f"Error de Markdown, enviando sin formato: {markdown_error}")
                        logging.warning(f"Texto problem√°tico: {repr(text)}")
                        # Limpiar el texto y enviar sin formato
                        clean_text = clean_text_for_telegram(text)
                        bot.send_message(chat_id, clean_text, parse_mode=None)
                        return True
                    else:
                        raise markdown_error
            else:
                bot.send_message(chat_id, text, parse_mode=parse_mode)
                return True
        except (ConnectionError, Timeout, RequestException, NewConnectionError, MaxRetryError) as e:
            logging.warning(f"Intento {attempt + 1} fallido al enviar mensaje: {e}")
            if attempt < max_retries - 1:
                wait_time = min(2 ** attempt, 30)  # M√°ximo 30 segundos
                logging.info(f"Esperando {wait_time} segundos antes del siguiente intento...")
                time.sleep(wait_time)
            else:
                logging.error(f"Error despu√©s de {max_retries} intentos al enviar mensaje: {e}")
                return False
        except Exception as e:
            logging.error(f"Error inesperado al enviar mensaje: {e}")
            return False
    return False

def safe_reply_to(message, text, parse_mode='Markdown', max_retries=5):
    """Responde a un mensaje con reintentos en caso de error de conexi√≥n"""
    for attempt in range(max_retries):
        try:
            # Si hay error de parseo de Markdown, intentar sin formato
            if parse_mode == 'Markdown':
                try:
                    bot.reply_to(message, text, parse_mode=parse_mode)
                    return True
                except Exception as markdown_error:
                    if "can't parse entities" in str(markdown_error) or "Bad Request" in str(markdown_error):
                        logging.warning(f"Error de Markdown, enviando sin formato: {markdown_error}")
                        logging.warning(f"Texto problem√°tico: {repr(text)}")
                        # Limpiar el texto y enviar sin formato
                        clean_text = clean_text_for_telegram(text)
                        bot.reply_to(message, clean_text, parse_mode=None)
                        return True
                    else:
                        raise markdown_error
            else:
                bot.reply_to(message, text, parse_mode=parse_mode)
                return True
        except (ConnectionError, Timeout, RequestException, NewConnectionError, MaxRetryError) as e:
            logging.warning(f"Intento {attempt + 1} fallido al responder mensaje: {e}")
            if attempt < max_retries - 1:
                wait_time = min(2 ** attempt, 30)  # M√°ximo 30 segundos
                logging.info(f"Esperando {wait_time} segundos antes del siguiente intento...")
                time.sleep(wait_time)
            else:
                logging.error(f"Error despu√©s de {max_retries} intentos al responder mensaje: {e}")
                return False
        except Exception as e:
            logging.error(f"Error inesperado al responder mensaje: {e}")
            return False
    return False

# Inicializar base de datos
if not init_database():
    logging.error("‚ùå No se pudo inicializar la base de datos. Saliendo...")
    exit(1)

# Cargar usuarios registrados al iniciar
registered_users = load_registered_users()

# Cargar usuarios de mensajes directos al iniciar
direct_message_users = load_direct_message_users()

# Verificar conectividad antes de iniciar
if not check_network_connectivity():
    logging.error("‚ùå No se pudo verificar la conectividad de red. El bot puede no funcionar correctamente.")
    logging.info("üîÑ Reintentando en 30 segundos...")
    time.sleep(30)
    if not check_network_connectivity():
        logging.error("‚ùå Conectividad de red no disponible. Saliendo...")
        exit(1)

# Limpiar webhook al iniciar
clear_webhook()

@bot.message_handler(commands=['start'])
def start_command(message):
    """Comando de inicio del bot"""
    welcome_text = """
ü§ñ ¬°Hola! Soy el Bot de Menciones

Estoy aqu√≠ para ayudarte a mencionar a todos los integrantes de tu grupo.

Comandos principales:
‚Ä¢ /all - Menciona a todos
‚Ä¢ /allbug - Alerta de bug
‚Ä¢ /allerror - Alerta de error de cuota
‚Ä¢ /marcus - Mensaje especial de Marcus
‚Ä¢ /nba - D√≠as restantes para temporada NBA 2025-26
‚Ä¢ /mensaje - Registrarse para mensajes directos de alertas
‚Ä¢ /nomensaje - Desregistrarse de mensajes directos
‚Ä¢ /testdirecto - Probar si el bot puede enviar mensajes directos
‚Ä¢ /register - Registrarse para menciones (o responder a un mensaje para registrar a otro)
‚Ä¢ /unregister - Desregistrarse
‚Ä¢ /help - Ver ayuda completa

¬°Agr√©game a un grupo y hazme administrador para empezar!
    """
    safe_reply_to(message, welcome_text, parse_mode=None)

@bot.message_handler(commands=['help'])
def help_command(message):
    """Muestra la ayuda del bot"""
    help_text = """
Bot de Menciones - Ayuda

Comandos disponibles:
‚Ä¢ /all - Menciona a todos los miembros del grupo
‚Ä¢ /allbug - Alerta de bug (menciona a todos)
‚Ä¢ /allerror - Alerta de error de cuota (menciona a todos)
‚Ä¢ /marcus - Mensaje especial de Marcus
‚Ä¢ /nba - D√≠as restantes para temporada NBA 2025-26
‚Ä¢ /mensaje - Registrarse para mensajes directos de alertas
‚Ä¢ /nomensaje - Desregistrarse de mensajes directos
‚Ä¢ /testdirecto - Probar si el bot puede enviar mensajes directos
‚Ä¢ /listamensajes - Muestra usuarios registrados para mensajes directos
‚Ä¢ /admins - Menciona solo a los administradores
‚Ä¢ /register - Registrarse para recibir menciones (o responder a un mensaje para registrar a otro usuario)
‚Ä¢ /unregister - Desregistrarse de las menciones
‚Ä¢ /registered - Muestra usuarios registrados
‚Ä¢ /historial - Muestra historial de registros
‚Ä¢ /backup - Crea respaldo de la base de datos
‚Ä¢ /count - Muestra estad√≠sticas del grupo
‚Ä¢ /help - Muestra esta ayuda

Notas importantes:
‚Ä¢ El bot debe ser administrador del grupo
‚Ä¢ Solo funciona en grupos y supergrupos
‚Ä¢ Para mencionar a todos, el bot necesita permisos especiales
‚Ä¢ Los usuarios registrados recibir√°n menciones especiales
‚Ä¢ Los usuarios con /mensaje recibir√°n notificaciones directas
‚Ä¢ Los datos se guardan permanentemente en la base de datos
    """
    safe_reply_to(message, help_text, parse_mode=None)

@bot.message_handler(commands=['register'])
def register_user(message):
    """Registra al usuario para recibir menciones o a otros usuarios"""
    try:
        # Debug: Log del mensaje
        logging.info(f"üîç Debug register: reply_to_message={message.reply_to_message is not None}")
        if message.reply_to_message:
            logging.info(f"üîç Debug: reply_from_user={message.reply_to_message.from_user is not None}")
        
        # Verificar si hay reply (mencionar a otro usuario)
        if message.reply_to_message and message.reply_to_message.from_user:
            # Registrar al usuario mencionado en la respuesta
            target_user = message.reply_to_message.from_user
            user_id = target_user.id
            username = target_user.username
            first_name = target_user.first_name
            last_name = target_user.last_name
            
            logging.info(f"üîç Debug: Registrando a {first_name} (ID: {user_id}) por reply")
            
            # Verificar si ya est√° registrado
            if user_id in registered_users:
                safe_reply_to(message, f"‚úÖ {first_name} ya est√° registrado para recibir menciones.")
                return
            
            # Agregar a la base de datos
            if add_registered_user(user_id, username, first_name, last_name):
                registered_users.add(user_id)
                
                # Crear menci√≥n personalizada
                mention_text = f"‚úÖ ¬°{first_name} registrado exitosamente!\n\n"
                if username:
                    mention_text += f"Usuario: @{username}\n"
                else:
                    mention_text += f"Nombre: {first_name or 'Usuario'}\n"
                mention_text += f"ID: {user_id}\n\n"
                mention_text += "Ahora recibir√° menciones especiales cuando uses los comandos de alerta."
                
                safe_reply_to(message, mention_text, parse_mode=None)
                log_user_action(message.from_user.id, "REGISTER_OTHER", f"Registr√≥ a {first_name} ({user_id})")
            else:
                safe_reply_to(message, "‚ùå Error al registrar al usuario. Intenta de nuevo m√°s tarde.")
        elif message.text and len(message.text.split()) > 1:
            # Verificar si hay una menci√≥n en el texto
            text_parts = message.text.split()
            if len(text_parts) > 1 and text_parts[1].startswith('@'):
                # Extraer el username de la menci√≥n
                target_username = text_parts[1][1:]  # Quitar el @
                
                # Buscar el usuario en el chat
                if message.chat.type in ['group', 'supergroup']:
                    # En grupos, necesitamos obtener la informaci√≥n del usuario
                    safe_reply_to(message, f"‚ùå No puedo registrar a @{target_username} directamente. Usa 'Responder a un mensaje' + /register en su lugar.")
                    return
                else:
                    safe_reply_to(message, "‚ùå Este comando solo funciona en grupos. Usa 'Responder a un mensaje' + /register en su lugar.")
                    return
            else:
                safe_reply_to(message, "‚ùå Formato incorrecto. Usa: /register @usuario o responde a un mensaje + /register")
                return
        else:
            # Registrar al usuario que envi√≥ el comando
            user_id = message.from_user.id
            username = message.from_user.username
            first_name = message.from_user.first_name
            last_name = message.from_user.last_name
            
            logging.info(f"üîç Debug: Registrando a {first_name} (ID: {user_id}) - sin reply")
            
            if user_id in registered_users:
                safe_reply_to(message, "‚úÖ Ya est√°s registrado para recibir menciones.")
                return
            
            # Agregar a la base de datos
            if add_registered_user(user_id, username, first_name, last_name):
                registered_users.add(user_id)
                
                # Crear menci√≥n personalizada
                mention_text = f"‚úÖ ¬°Registro exitoso!\n\n"
                if username:
                    mention_text += f"Usuario: @{username}\n"
                else:
                    mention_text += f"Nombre: {first_name or 'Usuario'}\n"
                mention_text += f"ID: {user_id}\n\n"
                mention_text += "Ahora recibir√°s menciones especiales cuando uses los comandos de alerta."
                
                safe_reply_to(message, mention_text, parse_mode=None)
            else:
                safe_reply_to(message, "‚ùå Ocurri√≥ un error al registrarte en la base de datos. Intenta de nuevo.")
        
    except Exception as e:
        logging.error(f"Error al registrar usuario: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al registrarte. Intenta de nuevo.")

@bot.message_handler(commands=['unregister'])
def unregister_user(message):
    """Desregistra al usuario de las menciones"""
    try:
        user_id = message.from_user.id
        
        if user_id not in registered_users:
            safe_reply_to(message, "‚ùå No est√°s registrado.")
            return
        
        # Remover de la base de datos
        if remove_registered_user(user_id):
            registered_users.remove(user_id)
            safe_reply_to(message, "‚úÖ Te has desregistrado de las menciones.")
        else:
            safe_reply_to(message, "‚ùå Ocurri√≥ un error al desregistrarte de la base de datos. Intenta de nuevo.")
        
    except Exception as e:
        logging.error(f"Error al desregistrar usuario: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al desregistrarte. Intenta de nuevo.")

@bot.message_handler(commands=['all'])
def mention_all(message):
    """Menciona a todos los miembros del grupo"""
    try:
        chat_id = message.chat.id
        
        if message.chat.type not in ['group', 'supergroup']:
            safe_reply_to(message, "‚ùå Este comando solo funciona en grupos.")
            return
        
        # Obtener informaci√≥n del chat
        chat_member_count = bot.get_chat_member_count(chat_id)
        
        mention_text = f"üîî MENCI√ìN GENERAL üîî\n\n"
        mention_text += f"Total de miembros: {chat_member_count}\n"
        mention_text += f"üìù Usuarios registrados: {len(registered_users)}\n\n"
        
        # Obtener administradores
        administrators = bot.get_chat_administrators(chat_id)
        
        # Lista para almacenar las menciones
        mentions = []
        mentioned_users = set()
        
        # Agregar administradores primero
        for admin in administrators:
            if not admin.user.is_bot:
                if admin.user.username:
                    clean_username = clean_name_for_mention(admin.user.username)
                    if f"@{clean_username}" not in mentioned_users:
                        mentions.append(f"@{clean_username}")
                        mentioned_users.add(f"@{clean_username}")
                else:
                    user_id = admin.user.id
                    if f"user_{user_id}" not in mentioned_users:
                        full_name = clean_name_for_mention(admin.user.first_name or "Usuario")
                        if admin.user.last_name:
                            full_name += f" {clean_name_for_mention(admin.user.last_name)}"
                        mentions.append(f"[{full_name}](tg://user?id={user_id})")
                        mentioned_users.add(f"user_{user_id}")
        
        # Agregar usuarios registrados que no sean administradores
        for user_id in registered_users:
            try:
                # Verificar si el usuario est√° en el grupo
                member = bot.get_chat_member(chat_id, user_id)
                if member.status in ['member', 'administrator', 'creator']:
                    if member.user.username:
                        clean_username = clean_name_for_mention(member.user.username)
                        if f"@{clean_username}" not in mentioned_users:
                            mentions.append(f"@{clean_username}")
                            mentioned_users.add(f"@{clean_username}")
                    else:
                        if f"user_{user_id}" not in mentioned_users:
                            full_name = escape_markdown(member.user.first_name)
                            if member.user.last_name:
                                full_name += f" {escape_markdown(member.user.last_name)}"
                            mentions.append(f"[{full_name}](tg://user?id={user_id})")
                            mentioned_users.add(f"user_{user_id}")
            except Exception as e:
                logging.error(f"Error al obtener usuario {user_id}: {e}")
                continue
        
        if mentions:
            # Crear texto de menciones seguro
            final_text = create_safe_mention_text(mention_text, mentions)
            safe_send_message(chat_id, final_text, parse_mode='Markdown')
            
            # Enviar mensajes directos a usuarios registrados
            send_direct_messages_to_users("MENCI√ìN GENERAL", "/all")
        else:
            safe_reply_to(message, "‚ùå No se pudieron obtener los miembros del grupo.")
            
    except Exception as e:
        logging.error(f"Error al mencionar a todos: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al procesar la solicitud.")

@bot.message_handler(commands=['allbug'])
def mention_all_bug(message):
    """Menciona a todos para alerta de bug"""
    try:
        chat_id = message.chat.id
        
        if message.chat.type not in ['group', 'supergroup']:
            safe_reply_to(message, "‚ùå Este comando solo funciona en grupos.")
            return
        
        # Obtener informaci√≥n del chat
        chat_member_count = bot.get_chat_member_count(chat_id)
        
        mention_text = f"üö® ALERTA DE BUG üö®\n\n"
        mention_text += f"Total de miembros: {chat_member_count}\n"
        mention_text += f"üìù Usuarios registrados: {len(registered_users)}\n\n"
        mention_text += "‚ö†Ô∏è Se ha detectado un bug cr√≠tico que requiere atenci√≥n inmediata\n\n"
        
        # Obtener administradores
        administrators = bot.get_chat_administrators(chat_id)
        
        # Lista para almacenar las menciones
        mentions = []
        mentioned_users = set()
        
        # Agregar administradores primero
        for admin in administrators:
            if not admin.user.is_bot:
                if admin.user.username:
                    clean_username = clean_name_for_mention(admin.user.username)
                    if f"@{clean_username}" not in mentioned_users:
                        mentions.append(f"@{clean_username}")
                        mentioned_users.add(f"@{clean_username}")
                else:
                    user_id = admin.user.id
                    if f"user_{user_id}" not in mentioned_users:
                        full_name = clean_name_for_mention(admin.user.first_name or "Usuario")
                        if admin.user.last_name:
                            full_name += f" {clean_name_for_mention(admin.user.last_name)}"
                        mentions.append(f"[{full_name}](tg://user?id={user_id})")
                        mentioned_users.add(f"user_{user_id}")
        
        # Agregar usuarios registrados que no sean administradores
        for user_id in registered_users:
            try:
                # Verificar si el usuario est√° en el grupo
                member = bot.get_chat_member(chat_id, user_id)
                if member.status in ['member', 'administrator', 'creator']:
                    if member.user.username:
                        clean_username = clean_name_for_mention(member.user.username)
                        if f"@{clean_username}" not in mentioned_users:
                            mentions.append(f"@{clean_username}")
                            mentioned_users.add(f"@{clean_username}")
                    else:
                        if f"user_{user_id}" not in mentioned_users:
                            full_name = escape_markdown(member.user.first_name)
                            if member.user.last_name:
                                full_name += f" {escape_markdown(member.user.last_name)}"
                            mentions.append(f"[{full_name}](tg://user?id={user_id})")
                            mentioned_users.add(f"user_{user_id}")
            except Exception as e:
                logging.error(f"Error al obtener usuario {user_id}: {e}")
                continue
        
        if mentions:
            # Crear texto de menciones seguro
            final_text = create_safe_mention_text(mention_text, mentions)
            safe_send_message(chat_id, final_text, parse_mode='Markdown')
            
            # Enviar mensajes directos a usuarios registrados
            send_direct_messages_to_users("ALERTA DE BUG CR√çTICO", "/allbug")
        else:
            safe_reply_to(message, "‚ùå No se pudieron obtener los miembros del grupo.")
            
    except Exception as e:
        logging.error(f"Error al mencionar para bug: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al procesar la solicitud.")

@bot.message_handler(commands=['allerror'])
def mention_all_error(message):
    """Menciona a todos para alerta de error de cuota"""
    try:
        chat_id = message.chat.id
        
        if message.chat.type not in ['group', 'supergroup']:
            safe_reply_to(message, "‚ùå Este comando solo funciona en grupos.")
            return
        
        # Obtener informaci√≥n del chat
        chat_member_count = bot.get_chat_member_count(chat_id)
        
        mention_text = f"üí• ALERTA DE ERROR DE CUOTA üí•\n\n"
        mention_text += f"Total de miembros: {chat_member_count}\n"
        mention_text += f"üìù Usuarios registrados: {len(registered_users)}\n\n"
        mention_text += "‚ö†Ô∏è Se ha alcanzado el l√≠mite de cuota del sistema\n"
        mention_text += "üîß Se requiere intervenci√≥n inmediata del equipo t√©cnico\n\n"
        
        # Obtener administradores
        administrators = bot.get_chat_administrators(chat_id)
        
        # Lista para almacenar las menciones
        mentions = []
        mentioned_users = set()
        
        # Agregar administradores primero
        for admin in administrators:
            if not admin.user.is_bot:
                if admin.user.username:
                    clean_username = clean_name_for_mention(admin.user.username)
                    if f"@{clean_username}" not in mentioned_users:
                        mentions.append(f"@{clean_username}")
                        mentioned_users.add(f"@{clean_username}")
                else:
                    user_id = admin.user.id
                    if f"user_{user_id}" not in mentioned_users:
                        full_name = clean_name_for_mention(admin.user.first_name or "Usuario")
                        if admin.user.last_name:
                            full_name += f" {clean_name_for_mention(admin.user.last_name)}"
                        mentions.append(f"[{full_name}](tg://user?id={user_id})")
                        mentioned_users.add(f"user_{user_id}")
        
        # Agregar usuarios registrados que no sean administradores
        for user_id in registered_users:
            try:
                # Verificar si el usuario est√° en el grupo
                member = bot.get_chat_member(chat_id, user_id)
                if member.status in ['member', 'administrator', 'creator']:
                    if member.user.username:
                        clean_username = clean_name_for_mention(member.user.username)
                        if f"@{clean_username}" not in mentioned_users:
                            mentions.append(f"@{clean_username}")
                            mentioned_users.add(f"@{clean_username}")
                    else:
                        if f"user_{user_id}" not in mentioned_users:
                            full_name = escape_markdown(member.user.first_name)
                            if member.user.last_name:
                                full_name += f" {escape_markdown(member.user.last_name)}"
                            mentions.append(f"[{full_name}](tg://user?id={user_id})")
                            mentioned_users.add(f"user_{user_id}")
            except Exception as e:
                logging.error(f"Error al obtener usuario {user_id}: {e}")
                continue
        
        if mentions:
            # Crear texto de menciones seguro
            final_text = create_safe_mention_text(mention_text, mentions)
            safe_send_message(chat_id, final_text, parse_mode='Markdown')
            
            # Enviar mensajes directos a usuarios registrados
            send_direct_messages_to_users("ALERTA DE ERROR DE CUOTA", "/allerror")
        else:
            safe_reply_to(message, "‚ùå No se pudieron obtener los miembros del grupo.")
            
    except Exception as e:
        logging.error(f"Error al mencionar para error: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al procesar la solicitud.")

@bot.message_handler(commands=['admins'])
def mention_admins(message):
    """Menciona solo a los administradores del grupo"""
    try:
        chat_id = message.chat.id
        
        if message.chat.type not in ['group', 'supergroup']:
            safe_reply_to(message, "‚ùå Este comando solo funciona en grupos.")
            return
        
        administrators = bot.get_chat_administrators(chat_id)
        
        mention_text = "üîî MENCI√ìN A ADMINISTRADORES üîî\n\n"
        mentions = []
        
        for admin in administrators:
            if not admin.user.is_bot and admin.user.username:
                clean_username = clean_name_for_mention(admin.user.username)
                mentions.append(f"@{clean_username}")
            elif not admin.user.is_bot:
                full_name = clean_name_for_mention(admin.user.first_name or "Usuario")
                if admin.user.last_name:
                    full_name += f" {clean_name_for_mention(admin.user.last_name)}"
                mentions.append(f"[{full_name}](tg://user?id={admin.user.id})")
        
        if mentions:
            mention_text += " ".join(mentions)
            safe_send_message(chat_id, mention_text, parse_mode='Markdown')
        else:
            safe_reply_to(message, "‚ùå No se encontraron administradores.")
            
    except Exception as e:
        logging.error(f"Error al mencionar administradores: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al procesar la solicitud.")

@bot.message_handler(commands=['count'])
def count_members(message):
    """Cuenta los miembros del grupo"""
    try:
        chat_id = message.chat.id
        
        if message.chat.type not in ['group', 'supergroup']:
            safe_reply_to(message, "‚ùå Este comando solo funciona en grupos.")
            return
        
        member_count = bot.get_chat_member_count(chat_id)
        administrators = bot.get_chat_administrators(chat_id)
        
        admin_count = len([admin for admin in administrators if not admin.user.is_bot])
        
        count_text = f"""
üìä INFORMACI√ìN DEL GRUPO

 Total de miembros: {member_count}
 Administradores: {admin_count}
 Miembros normales: {member_count - admin_count}
üìù Usuarios registrados: {len(registered_users)}

Nota: Solo puedo mencionar a administradores por limitaciones de la API de Telegram.
        """
        
        safe_reply_to(message, count_text, parse_mode=None)
        
    except Exception as e:
        logging.error(f"Error al contar miembros: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al procesar la solicitud.")

@bot.message_handler(commands=['registered'])
def show_registered_users(message):
    """Muestra los usuarios registrados"""
    try:
        if not registered_users:
            safe_reply_to(message, "üìù No hay usuarios registrados.")
            return
        
        # Obtener informaci√≥n detallada de Supabase
        try:
            result = supabase.table('registered_users').select('user_id, username, first_name, last_name, registered_at').order('registered_at', desc=True).execute()
            
            users_info = result.data
            
            count_text = f"üìä USUARIOS REGISTRADOS\n\n"
            count_text += f"Total registrados: {len(registered_users)}\n\n"
            
            # Mostrar √∫ltimos 10 usuarios registrados
            count_text += "√öltimos registros:\n"
            for i, user_data in enumerate(users_info[:10]):
                username = user_data.get('username')
                first_name = user_data.get('first_name')
                last_name = user_data.get('last_name')
                user_id = user_data.get('user_id')
                registered_at = user_data.get('registered_at')
                
                display_name = username if username else f"{first_name or 'Usuario'}"
                if last_name:
                    display_name += f" {last_name}"
                # Limpiar el nombre para evitar problemas de Markdown
                clean_display_name = clean_text_for_telegram(display_name)
                count_text += f"{i+1}. {clean_display_name} (ID: {user_id})\n"
            
            if len(users_info) > 10:
                count_text += f"\n... y {len(users_info) - 10} m√°s"
            
            count_text += "\n\nLos usuarios registrados recibir√°n menciones especiales en los comandos de alerta."
            
        except Exception as db_error:
            logging.error(f"Error al consultar Supabase: {db_error}")
            count_text = f"""
üìä USUARIOS REGISTRADOS

Total registrados: {len(registered_users)}

Los usuarios registrados recibir√°n menciones especiales en los comandos de alerta.
        """
        
        safe_reply_to(message, count_text, parse_mode=None)
        
    except Exception as e:
        logging.error(f"Error al mostrar usuarios registrados: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al procesar la solicitud.")

@bot.message_handler(commands=['historial', 'logs'])
def show_registration_history(message):
    """Muestra el historial de registros y acciones"""
    try:
        # Obtener los √∫ltimos 20 registros desde Supabase
        result = supabase.table('user_registration_log').select('user_id, action, details, timestamp').order('timestamp', desc=True).limit(20).execute()
        
        logs = result.data
        
        if not logs:
            safe_reply_to(message, "üìù No hay historial de registros disponible.")
            return
        
        history_text = "üìä HISTORIAL DE REGISTROS\n\n"
        
        for log in logs:
            user_id = log.get('user_id')
            action = log.get('action')
            details = log.get('details')
            timestamp = log.get('timestamp')
            action_emoji = {
                "REGISTRO": "‚úÖ",
                "ACTUALIZACION": "üîÑ", 
                "ELIMINACION": "‚ùå"
            }.get(action, "üìù")
            
            # Formatear timestamp
            try:
                from datetime import datetime
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                formatted_time = dt.strftime("%d/%m/%Y %H:%M")
            except:
                formatted_time = timestamp
            
            history_text += f"{action_emoji} **{action}** - Usuario {user_id}\n"
            history_text += f"   üìÖ {formatted_time}\n"
            if details:
                history_text += f"   üìù {details}\n"
            history_text += "\n"
        
        if len(logs) == 20:
            history_text += "... (mostrando √∫ltimos 20 registros)"
        
        safe_reply_to(message, history_text, parse_mode=None)
        
    except Exception as e:
        logging.error(f"Error al mostrar historial: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al procesar la solicitud.")

@bot.message_handler(commands=['backup', 'respaldo'])
def create_database_backup(message):
    """Crea un respaldo de la base de datos"""
    try:
        if backup_database():
            safe_reply_to(message, "‚úÖ Respaldo de la base de datos creado exitosamente.")
        else:
            safe_reply_to(message, "‚ùå Error al crear el respaldo de la base de datos.")
    except Exception as e:
        logging.error(f"Error al crear respaldo: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al procesar la solicitud.")

@bot.message_handler(commands=['mensaje'])
def mensaje_command(message):
    """Registra al usuario para recibir mensajes directos de alertas"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        
        if user_id in direct_message_users:
            safe_reply_to(message, "‚úÖ Ya est√°s registrado para recibir mensajes directos de alertas.")
            return
        
        # Agregar a la base de datos
        if add_direct_message_user(user_id, username, first_name, last_name):
            direct_message_users.add(user_id)
            
            mensaje_text = f"‚úÖ ¬°Registro exitoso para mensajes directos!\n\n"
            if username:
                mensaje_text += f"Usuario: @{username}\n"
            else:
                mensaje_text += f"Nombre: {first_name or 'Usuario'}\n"
            mensaje_text += f"ID: {user_id}\n\n"
            mensaje_text += "Ahora recibir√°s mensajes directos cada vez que haya una alerta en el grupo.\n\n"
            mensaje_text += "‚ö†Ô∏è IMPORTANTE: Para recibir mensajes directos, debes:\n"
            mensaje_text += "1. Enviar un mensaje privado al bot (cualquier cosa)\n"
            mensaje_text += "2. Esto permite que el bot te contacte directamente\n\n"
            mensaje_text += "Usa /nomensaje para desregistrarte."
            
            safe_reply_to(message, mensaje_text, parse_mode=None)
        else:
            safe_reply_to(message, "‚ùå Ocurri√≥ un error al registrarte. Intenta de nuevo.")
        
    except Exception as e:
        logging.error(f"Error en comando mensaje: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al procesar la solicitud.")

@bot.message_handler(commands=['nomensaje'])
def nomensaje_command(message):
    """Desregistra al usuario de los mensajes directos"""
    try:
        user_id = message.from_user.id
        
        if user_id not in direct_message_users:
            safe_reply_to(message, "‚ùå No est√°s registrado para mensajes directos.")
            return
        
        # Remover de la base de datos
        if remove_direct_message_user(user_id):
            direct_message_users.remove(user_id)
            safe_reply_to(message, "‚úÖ Te has desregistrado de los mensajes directos.")
        else:
            safe_reply_to(message, "‚ùå Ocurri√≥ un error al desregistrarte. Intenta de nuevo.")
        
    except Exception as e:
        logging.error(f"Error en comando nomensaje: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al procesar la solicitud.")

@bot.message_handler(commands=['listamensajes'])
def listamensajes_command(message):
    """Muestra los usuarios registrados para mensajes directos"""
    try:
        if not direct_message_users:
            safe_reply_to(message, "üìù No hay usuarios registrados para mensajes directos.")
            return
        
        # Obtener informaci√≥n detallada de Supabase
        try:
            result = supabase.table('direct_message_users').select('user_id, username, first_name, last_name, registered_at').order('registered_at', desc=True).execute()
            
            users_info = result.data
            
            count_text = f"üìä USUARIOS REGISTRADOS PARA MENSAJES DIRECTOS\n\n"
            count_text += f"Total registrados: {len(direct_message_users)}\n\n"
            
            # Mostrar todos los usuarios registrados
            count_text += "Usuarios registrados:\n"
            for i, user_data in enumerate(users_info):
                username = user_data.get('username')
                first_name = user_data.get('first_name')
                last_name = user_data.get('last_name')
                user_id = user_data.get('user_id')
                registered_at = user_data.get('registered_at')
                
                display_name = username if username else f"{first_name or 'Usuario'}"
                if last_name:
                    display_name += f" {last_name}"
                # Limpiar el nombre para evitar problemas de Markdown
                clean_display_name = clean_text_for_telegram(display_name)
                count_text += f"{i+1}. {clean_display_name} (ID: {user_id})\n"
            
            count_text += "\nEstos usuarios recibir√°n mensajes directos cada vez que haya una alerta en el grupo."
            
        except Exception as db_error:
            logging.error(f"Error al consultar Supabase: {db_error}")
            count_text = f"""
üìä USUARIOS REGISTRADOS PARA MENSAJES DIRECTOS

Total registrados: {len(direct_message_users)}

Estos usuarios recibir√°n mensajes directos cada vez que haya una alerta en el grupo.
        """
        
        safe_reply_to(message, count_text, parse_mode=None)
        
    except Exception as e:
        logging.error(f"Error al mostrar usuarios de mensajes directos: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al procesar la solicitud.")

@bot.message_handler(commands=['testdirecto'])
def test_directo_command(message):
    """Comando para probar si el bot puede enviar mensajes directos al usuario"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        
        test_message = "üß™ PRUEBA DE MENSAJE DIRECTO üß™\n\n"
        test_message += "Si recibes este mensaje, el bot puede contactarte directamente.\n"
        test_message += "¬°Perfecto! Recibir√°s notificaciones de alertas del grupo."
        
        try:
            bot.send_message(user_id, test_message)
            safe_reply_to(message, "‚úÖ Mensaje directo enviado exitosamente. ¬°Puedes recibir notificaciones!")
            logging.info(f"‚úÖ Prueba de mensaje directo exitosa para usuario {user_id}")
        except Exception as e:
            error_str = str(e).lower()
            if "bot can't initiate conversation" in error_str:
                safe_reply_to(message, "‚ùå El bot no puede enviarte mensajes directos.\n\nPara solucionarlo:\n1. Ve al bot en privado\n2. Env√≠a cualquier mensaje (ej: /start)\n3. Prueba de nuevo con /testdirecto")
            else:
                safe_reply_to(message, f"‚ùå Error al enviar mensaje directo: {e}")
            logging.error(f"‚ùå Error en prueba de mensaje directo para usuario {user_id}: {e}")
        
        log_user_action(user_id, "TEST_DIRECTO", "Usuario prob√≥ mensaje directo")
        
    except Exception as e:
        logging.error(f"Error en comando testdirecto: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al procesar la solicitud.")

@bot.message_handler(commands=['nba'])
def nba_command(message):
    """Comando para mostrar d√≠as restantes hasta el inicio de la temporada NBA 2025-26"""
    try:
        # Mostrar mensaje de carga
        loading_msg = safe_reply_to(message, "üèÄ Buscando informaci√≥n de la NBA...", parse_mode=None)
        
        # Calcular d√≠as restantes
        days_left, season_start = calculate_days_until_nba()
        
        # Formatear fecha de inicio
        start_date_str = season_start.strftime("%d de %B de %Y")
        
        # Crear mensaje con emojis y formato
        nba_text = f"üèÄ **TEMPORADA NBA 2025-26** üèÄ\n\n"
        nba_text += f"üìÖ **Fecha de inicio:** {start_date_str}\n"
        nba_text += f"‚è∞ **D√≠as restantes:** {days_left} d√≠as\n\n"
        
        if days_left > 0:
            nba_text += f"üî• ¬°Solo quedan {days_left} d√≠as para el inicio de la temporada!\n"
            nba_text += f"üéØ Los equipos est√°n prepar√°ndose para la acci√≥n.\n"
        else:
            nba_text += f"üéâ ¬°La temporada ya comenz√≥!\n"
            nba_text += f"üèÜ ¬°Disfruta de los juegos de la NBA!\n"
        
        nba_text += f"\nüìä *Informaci√≥n actualizada al {datetime.now().strftime('%d/%m/%Y %H:%M')}*"
        
        # Enviar mensaje final
        safe_reply_to(message, nba_text, parse_mode='Markdown')
        
        # Log de la acci√≥n
        log_user_action(message.from_user.id, "NBA", f"Consult√≥ d√≠as restantes: {days_left} d√≠as")
        
        logging.info(f"‚úÖ Comando NBA ejecutado: {days_left} d√≠as restantes")
        
    except Exception as e:
        logging.error(f"Error en comando NBA: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al buscar informaci√≥n de la NBA. Intenta de nuevo m√°s tarde.")
        
        # Fallback con informaci√≥n b√°sica
        try:
            fallback_date = datetime(2025, 10, 22)
            today = datetime.now()
            days_left = max(0, (fallback_date - today).days)
            
            fallback_text = f"üèÄ **TEMPORADA NBA 2025-26** üèÄ\n\n"
            fallback_text += f"üìÖ **Fecha estimada de inicio:** 22 de Octubre de 2025\n"
            fallback_text += f"‚è∞ **D√≠as restantes:** {days_left} d√≠as\n\n"
            fallback_text += f"‚ö†Ô∏è *Informaci√≥n estimada (no se pudo conectar a internet)*"
            
            safe_reply_to(message, fallback_text, parse_mode='Markdown')
        except:
            safe_reply_to(message, "‚ùå Error al procesar la solicitud de NBA.")

@bot.message_handler(commands=['marcus'])
def marcus_command(message):
    """Comando especial de Marcus sobre Sinner y Roland Garros"""
    try:
        marcus_text = "**Sinner pagando 1.02, tiene servicio para ganar Roland Garros.**"
        safe_reply_to(message, marcus_text, parse_mode='Markdown')
        log_user_action(message.from_user.id, "MARCUS", "Usuario consult√≥ comando Marcus")
    except Exception as e:
        logging.error(f"Error en comando marcus: {e}")
        safe_reply_to(message, "‚ùå Ocurri√≥ un error al procesar la solicitud.")



def force_cleanup_all_instances():
    """Fuerza la limpieza de todas las instancias del bot"""
    try:
        # Obtener informaci√≥n del webhook
        webhook_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
        response = requests.get(webhook_url, timeout=10)
        
        if response.status_code == 200:
            webhook_data = response.json()
            if webhook_data.get('result', {}).get('url'):
                logging.info(f"üîç Webhook activo encontrado: {webhook_data['result']['url']}")
                
                # Eliminar webhook
                delete_url = f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook"
                delete_response = requests.get(delete_url, timeout=10)
                
                if delete_response.status_code == 200:
                    logging.info("‚úÖ Webhook eliminado correctamente")
                    time.sleep(3)  # Esperar a que se propague
                else:
                    logging.warning(f"‚ö†Ô∏è Error al eliminar webhook: {delete_response.status_code}")
            else:
                logging.info("‚ÑπÔ∏è No hay webhook configurado")
        
        # Intentar detener polling forzadamente
        try:
            bot.stop_polling()
            logging.info("‚úÖ Polling detenido")
        except:
            pass
            
        time.sleep(15)  # Esperar m√°s tiempo para que se propague
        return True
        
    except Exception as e:
        logging.error(f"‚ùå Error en limpieza forzada: {e}")
        return False

def start_bot_with_webhook():
    """Inicia el bot usando webhook en lugar de polling para evitar conflictos 409"""
    try:
        # Limpieza forzada de todas las instancias
        logging.info("üßπ Limpieza forzada de todas las instancias...")
        force_cleanup_all_instances()
        
        # Obtener URL del webhook desde variable de entorno
        webhook_url = os.getenv('WEBHOOK_URL', f"https://mi-bot-telegram-0bno.onrender.com/webhook")
        
        logging.info(f"üöÄ Configurando webhook: {webhook_url}")
        
        # Configurar webhook
        webhook_setup_url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
        webhook_data = {
            'url': webhook_url,
            'max_connections': 1,
            'allowed_updates': ['message']
        }
        
        response = requests.post(webhook_url, json=webhook_data, timeout=10)
        
        if response.status_code == 200:
            logging.info("‚úÖ Webhook configurado correctamente")
            return True
        else:
            logging.error(f"‚ùå Error al configurar webhook: {response.status_code}")
            return False
            
    except Exception as e:
        logging.error(f"‚ùå Error al configurar webhook: {e}")
        return False

def start_bot_with_retry():
    """Inicia el bot con reintentos autom√°ticos en caso de error de conexi√≥n"""
    max_restart_attempts = 5
    restart_delay = 30  # 30 segundos entre intentos
    
    # Delay inicial para evitar conflictos
    logging.info("‚è≥ Esperando 30 segundos para evitar conflictos...")
    time.sleep(30)
    
    # Limpieza b√°sica antes de empezar
    logging.info("üßπ Limpieza b√°sica antes de iniciar...")
    clear_webhook()
    time.sleep(10)
    
    logging.info("üöÄ Iniciando bot con polling...")
    
    for attempt in range(max_restart_attempts):
        try:
            # Limpieza b√°sica antes de cada intento
            if attempt > 0:
                logging.info(f"üßπ Limpieza b√°sica antes del intento {attempt + 1}...")
                clear_webhook()
                time.sleep(10)
            
            logging.info(f"üöÄ Iniciando Bot de Menciones (intento {attempt + 1}/{max_restart_attempts})...")
            logging.info(f"Token configurado: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
            logging.info(f"Usuarios registrados: {len(registered_users)}")
            
            # Configurar el bot con timeouts normales
            bot.infinity_polling(
                timeout=20, 
                long_polling_timeout=10,
                interval=2,
                none_stop=True
            )
            
        except (ConnectionError, Timeout, NewConnectionError, MaxRetryError) as e:
            logging.error(f"‚ùå Error de conexi√≥n en intento {attempt + 1}: {e}")
            if attempt < max_restart_attempts - 1:
                logging.info(f"üîÑ Reintentando en {restart_delay} segundos...")
                time.sleep(restart_delay)
                # Verificar conectividad antes de reintentar
                if check_network_connectivity():
                    logging.info("‚úÖ Conectividad restaurada, reintentando...")
                else:
                    logging.warning("‚ö†Ô∏è Conectividad a√∫n no disponible")
            else:
                logging.error("‚ùå M√°ximo n√∫mero de reintentos alcanzado. Saliendo...")
                break
                
        except Exception as e:
            error_str = str(e)
            if "409" in error_str and "Conflict" in error_str:
                logging.error(f"‚ùå Conflicto de instancias en intento {attempt + 1}: {e}")
                if attempt < max_restart_attempts - 1:
                    # Delay progresivo para conflictos de instancias
                    conflict_delay = min(restart_delay * (2 ** min(attempt, 4)), 300)  # M√°ximo 5 minutos
                    logging.info(f"üîÑ Esperando {conflict_delay} segundos para resolver conflicto...")
                    time.sleep(conflict_delay)
                    
                    # Limpieza forzada antes de reintentar
                    logging.info("üßπ Limpieza forzada antes de reintentar...")
                    force_cleanup_all_instances()
                else:
                    logging.error("‚ùå M√°ximo n√∫mero de reintentos alcanzado. Saliendo...")
                    break
            else:
                logging.error(f"‚ùå Error inesperado en intento {attempt + 1}: {e}")
                if attempt < max_restart_attempts - 1:
                    logging.info(f"üîÑ Reintentando en {restart_delay} segundos...")
                    time.sleep(restart_delay)
                else:
                    logging.error("‚ùå M√°ximo n√∫mero de reintentos alcanzado. Saliendo...")
                    break
                
        except KeyboardInterrupt:
            logging.info("\nüõë Bot detenido por el usuario")
            break
            
        except Exception as e:
            logging.error(f"‚ùå Error inesperado: {e}")
            if attempt < max_restart_attempts - 1:
                logging.info(f"üîÑ Reintentando en {restart_delay} segundos...")
                time.sleep(restart_delay)
            else:
                logging.error("‚ùå M√°ximo n√∫mero de reintentos alcanzado. Saliendo...")
                break

def start_web_server():
    """Inicia un servidor web simple para Render"""
    from flask import Flask, request, jsonify
    app = Flask(__name__)
    
    @app.route('/')
    def health_check():
        return "Bot de Telegram funcionando correctamente"
    
    @app.route('/health')
    def health():
        return {"status": "ok", "bot": "running"}
    
    @app.route('/webhook', methods=['POST'])
    def webhook():
        """Endpoint para recibir actualizaciones de Telegram"""
        try:
            if request.headers.get('content-type') == 'application/json':
                json_data = request.get_json()
                if json_data and 'update_id' in json_data:
                    # Procesar la actualizaci√≥n
                    update = telebot.types.Update.de_json(json_data)
                    bot.process_new_updates([update])
                    return jsonify({"status": "ok"})
                else:
                    logging.warning("‚ö†Ô∏è Datos de webhook inv√°lidos o sin update_id")
                    return jsonify({"status": "error", "message": "Invalid update data"}), 400
            return jsonify({"status": "error", "message": "Invalid content type"}), 400
        except Exception as e:
            logging.error(f"Error en webhook: {e}")
            return jsonify({"status": "error", "message": str(e)}), 500
    
    # Obtener puerto de Render o usar 5000 por defecto
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

if __name__ == '__main__':
    # Iniciar bot en un hilo separado
    import threading
    bot_thread = threading.Thread(target=start_bot_with_retry)
    bot_thread.daemon = True
    bot_thread.start()
    
    # Iniciar servidor web
    start_web_server()
